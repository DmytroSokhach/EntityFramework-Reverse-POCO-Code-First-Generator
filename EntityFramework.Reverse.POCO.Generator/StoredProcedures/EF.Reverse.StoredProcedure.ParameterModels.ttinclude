<#@ import namespace="System.Text" #>
<#
if(Settings.StoredProcs.Any() && Settings.ElementsToGenerate.HasFlag(Elements.Poco))
{
if(!Settings.GenerateSeparateFiles) 
{ #>
    #region Stored procedure parameter models

<# } #>

<#
foreach(var sp in Settings.StoredProcs.Where(x => x.ReturnModels.Count > 0 &&
 x.ReturnModels.Any(returnColumns => returnColumns.Any()) &&
 !Settings.StoredProcedureReturnTypes.ContainsKey(x.NameHumanCase) &&
 !Settings.StoredProcedureReturnTypes.ContainsKey(x.Name)).OrderBy(x => x.NameHumanCase))
{
    string spReturnClassName = WriteStoredProcParameterModelName(sp);
#>
<# fileManager.StartNewFile(spReturnClassName + Settings.FileExtension);#>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <#= Settings.ResultClassModifiers #> class <#= spReturnClassName #>
    {
<#
    var sb = new StringBuilder();
    int n = 1;
    int paramCount = sp.Parameters.Count;
    foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
    {
        sb.AppendFormat("public {0}{1}{2} {3}",
            p.Mode == StoredProcedureParameterMode.In ? "" : "out ",
            p.PropertyType,
            NotNullable.Contains(p.PropertyType.ToLower()) ? string.Empty : "?",
            p.NameHumanCase);
        sb.AppendLine(" { get; set; }");
    }#>
<#= sb.ToString() #>
public int procResult { get; set; }
}
<# }
if(Settings.StoredProcs.Any() && Settings.ElementsToGenerate.HasFlag(Elements.Poco) && !Settings.GenerateSeparateFiles) { #>
    #endregion
<# } } #>